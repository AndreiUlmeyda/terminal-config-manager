-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/githubuser/terminal-config-manager#readme</a>
@package terminal-config-manager
@version 0.1.0.0


module Infrastructure.Config

-- | A configurations consists of multiple items.
data Config
MkConfig :: [ConfigItem] -> Config

-- | A configuration item contains a description and information needed to
--   identify the correct string substitution inside of the target file.
data ConfigItem
MkConfigItem :: Text -> FilePath -> Pattern -> TargetValue -> [TargetValue] -> ConfigItem
[title] :: ConfigItem -> Text
[path] :: ConfigItem -> FilePath
[matchingPattern] :: ConfigItem -> Pattern
[targetValue] :: ConfigItem -> TargetValue
[possibleValues] :: ConfigItem -> [TargetValue]

-- | Parse the YAML config file into the types specified above. Throw an
--   error if something is missing.
loadConfig :: IO Config

-- | A substring inside of the file you want to manage. Its occurence
--   inside of that file will be substituted when changing the
--   corresponding item.
data TargetValue
MkTargetValue :: Text -> TargetValue

-- | In order to identify which part of a target file to modify, a pattern
--   needs to be specified. This pattern must contain the string
--   "{{value}}" and surrounding text. The amount of surrounding text needs
--   to be carefully considered. It should be long enough so that only the
--   one intended line of the target file will match it.
data Pattern
MkPattern :: Text -> Pattern
instance GHC.Generics.Generic Infrastructure.Config.TargetValue
instance GHC.Classes.Eq Infrastructure.Config.TargetValue
instance GHC.Show.Show Infrastructure.Config.TargetValue
instance GHC.Generics.Generic Infrastructure.Config.Pattern
instance GHC.Classes.Eq Infrastructure.Config.Pattern
instance GHC.Show.Show Infrastructure.Config.Pattern
instance GHC.Show.Show Infrastructure.Config.ConfigItem
instance GHC.Classes.Eq Infrastructure.Config.ConfigItem
instance GHC.Show.Show Infrastructure.Config.Config
instance GHC.Classes.Eq Infrastructure.Config.Config
instance Data.Aeson.Types.FromJSON.FromJSON Infrastructure.Config.Config
instance Data.Aeson.Types.FromJSON.FromJSON Infrastructure.Config.ConfigItem
instance Data.Aeson.Types.FromJSON.FromJSON Infrastructure.Config.Pattern
instance Data.Aeson.Types.FromJSON.FromJSON Infrastructure.Config.TargetValue


module Domain.State

-- | The state of the application. It will guarantee that the list of items
--   contains at least one element and keep track of a cursor position.
data AppState
MkAppState :: NonEmptyCursor ConfigItem -> AppState

-- | When reacting to an event the result needs to be of type EventM.
--   Though not entirely accurate the synonym here is trying to communicate
--   that, in essence, a new state of the application is created.
type NextAppState = EventM ResourceName (Next AppState)

-- | An dummy type used only as a parameter of EventM
data ResourceName
instance GHC.Classes.Ord Domain.State.ResourceName
instance GHC.Classes.Eq Domain.State.ResourceName
instance GHC.Show.Show Domain.State.ResourceName
instance GHC.Classes.Eq Domain.State.AppState
instance GHC.Show.Show Domain.State.AppState


module Infrastructure.FileModification

-- | Given a filepath and a function which takes old content to new
--   content, will apply the function to the file content and, consequently
--   modify the file on disk.
modifyFile :: FilePath -> (Content -> Content) -> IO ()

-- | A type representing file content.
data Content
MkContent :: Text -> Content


module Infrastructure.Util

-- | Given an index, a function and a list it applies the function to the
--   element at that index.
changeNthElement :: Int -> (t -> t) -> [t] -> [t]

-- | Given an index, a function and a NonEmpty list it applies the function
--   to the element at that index.
changeNthElementNonEmpty :: Int -> (t -> t) -> NonEmpty t -> NonEmpty t

-- | Finds the first element equal to the input element inside of a list
--   and returns the element after it (one index up).
elementAfter :: Eq t => t -> [t] -> t

-- | Finds the first element equal to the input element inside of a list
--   and returns the element before it (one index down).
elementBefore :: Eq t => t -> [t] -> t


module Domain.StateTransition

-- | A function to change the cursor position to point at the next item.
--   TODO AppState as input type
selectNextItem :: NonEmptyCursor ConfigItem -> NextAppState

-- | When applied to an application state, select the next value of the
--   item under the cursor and modify the corresponding file accordingly.
--   TODO AppState as input type
selectNextValue :: NonEmptyCursor ConfigItem -> NextAppState

-- | A function to change the cursor position to point at the previous
--   item.
selectPreviousItem :: NonEmptyCursor ConfigItem -> NextAppState

-- | When applied to an application state, select the previous value of the
--   item under the cursor and modify the corresponding file accordingly.
selectPreviousValue :: NonEmptyCursor ConfigItem -> NextAppState


module UserInterface.Input

-- | Handle an event emitted by brick by unpacking the underlying vty event
--   and passing it the appropriate handler.
handleEvent :: AppState -> BrickEvent n e -> NextAppState


module UserInterface.Render

-- | The rendering consists of a single layer, each line consists of an
--   items title and current value. The selected line is rendered boldface,
--   the selected value, additionally, has a separate color.
drawTCM :: AppState -> [Widget ResourceName]

-- | Define the styling to be applied to selected items.
selectionStyling :: Attr

-- | Define the styling to be applied to the value of a selected line.
valueStyling :: Attr
instance GHC.Classes.Eq UserInterface.Render.Highlighting


module Application.App

-- | Wrap the config file entries in a nonempty list.
buildInitialState :: Config -> IO AppState

-- | For this application only event handling, drawing and some attributes
--   need to be implemented. The rest are default implementations.
tcmApp :: App AppState e ResourceName

-- | The state of the application. It will guarantee that the list of items
--   contains at least one element and keep track of a cursor position.
data AppState

-- | Run the app by loading items from the config file, turning them into
--   an initial state and then delegating to Brick. Unless a yaml parsing
--   exception is printed to facilitate config file debugging, there is no
--   failure condition and the program can exit successfully. This
--   situation may change after permission issues are considered.
runApp :: IO ()
