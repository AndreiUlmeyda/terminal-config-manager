# Cursor AI Rules for Terminal Config Manager

## Language & Style
- Use Haskell with explicit type signatures for all top-level functions
- Prefer newtype wrappers over type aliases for domain concepts
- Use record syntax with explicit field names for data types
- Follow Haskell naming conventions: camelCase for functions, PascalCase for types
- Import modules explicitly, avoid wildcard imports

## Architecture
- Maintain clean architecture separation: Domain ‚Üí Infrastructure ‚Üê UserInterface ‚Üê Application
- Keep Domain layer pure (no IO operations)
- Use custom monads (like FsReadIO) to restrict and control side effects
- Place all file I/O operations in Infrastructure layer

## Code Organization
- One main type/function per module when reasonable
- Export only what's needed by other modules
- Use meaningful module names that reflect their responsibility
- Group related functions together within modules

## Error Handling
- Use Either types for operations that can fail
- Create descriptive error messages in Infrastructure.Errors
- Handle errors at appropriate levels (don't let them bubble up unnecessarily)
- Use die from System.Exit for unrecoverable errors

## Dependencies
- Stick to LTS 22.44 resolver versions
- Prefer widely-used, stable libraries
- Justify any new dependencies in terms of project needs
- Use Stack for dependency management

## Development Environment & Tooling
- Instead of checking code formatting of specific files, eagerly run the code formatting tool on the whole project early and often

### Command-Line Tool Aliases
This project environment uses modern CLI tool aliases:
- `grep` ‚Üí `rg` (ripgrep)
- `find` ‚Üí `fd` (fd-find)

### Tool Syntax Differences
When suggesting commands, be aware of syntax differences:

#### File Finding
```bash
# Traditional find syntax (avoid in this environment)
find . -name "*.hs"
find src -type f -name "*.hs"

# Modern fd syntax (preferred)
fd "\.hs$"                    # All .hs files recursively
fd "\.hs$" src test          # In specific directories
fd -e hs                     # Alternative extension syntax

# Explicit compatibility (works reliably)
fd "\.hs$" src test          # For multiple directories (recommended)
fd "\.hs$"                   # For current directory
```

#### Text Searching  
```bash
# Traditional grep syntax (avoid in this environment)
grep -r "pattern" src/
grep -n "import" *.hs

# Modern rg syntax (preferred)
rg "pattern" src/
rg -n "import" --type haskell
rg "FsReadIO" --type haskell

# File type filters with rg
rg "pattern" -t haskell    # Haskell files only
rg "pattern" -g "*.hs"     # Glob pattern
```

### Recommended Commands for This Project
Use these specific commands that work reliably:

```bash
# Find all Haskell source files
fd .hs src test

# Search in Haskell files only  
rg "pattern" -t haskell

## Testing
- Write unit tests for pure domain logic
- Focus on testing business rules and edge cases
- Use property-based testing where appropriate
- Keep test data in test/data/ directory

### End-to-End Testing with Expect
üö® **CRITICAL**: When writing E2E tests with expect scripts:
- **NEVER use `sleep` calls** - they are unreliable and slow
- **ALWAYS use `expect{}` directives** to wait for specific output patterns
- Wait for actual application output like "navigate", config item titles, or help text
- Use `timeout {}` blocks to handle failure cases gracefully
- Structure expect blocks to catch both success and error patterns

Example:
```expect
expect {
    timeout {
        puts "ERROR: Application failed to start"
        exit 1
    }
    "navigate" {
        # App is ready when help text appears
    }
    "Error:" {
        puts "ERROR: Application startup failed"
        exit 1
    }
}
```

## UI Guidelines
- Use Brick framework conventions
- Keep rendering logic separate from business logic
- Handle keyboard events in dedicated Input module
- Use meaningful widget names and attributes

## Performance
- Lazy evaluation is generally fine for this application size
- Be explicit about strictness only when needed
- Prefer readability over micro-optimizations

## Code Verification Pipeline
üö® CRITICAL: ALWAYS run ./build-and-test.sh immediately after making ANY code changes to src/ files.
- If you modify ANY Haskell source files, you MUST run ./build-and-test.sh before proceeding
- Fix ALL compilation errors, warnings, and test failures before continuing
- No exceptions - this prevents breaking changes from being committed
- The script includes: formatting, linting, building, unit tests, integration tests, and E2E tests

```

### Pre-commit Hook
```bash
# Add to .git/hooks/pre-commit
#!/bin/bash
set -e
echo "Running code verification..."
stack exec ormolu -- --mode check $(fd "\.hs$" src test)
stack exec hlint -- src/ test/
stack build --ghc-options="-Wall -Werror"
stack test
echo "‚úÖ All checks passed!"
```

## üî• CRITICAL WORKFLOW RULE üî•
**NEVER SKIP THIS**: After changing ANY .hs file in src/, IMMEDIATELY run:
```bash
./build-and-test.sh
```
Fix any errors before proceeding. This is NON-NEGOTIABLE.

### CI/CD Pipeline
Ensure the following runs in continuous integration:
- `stack build --test --haddock --no-haddock-deps`
- `stack exec hlint -- src/ test/`
- `stack exec ormolu -- --mode check $(fd "\.hs$")`
- `stack test --coverage` 