# Cursor AI Rules for Terminal Config Manager

## Language & Style
- Use Haskell with explicit type signatures for all top-level functions
- Prefer newtype wrappers over type aliases for domain concepts
- Use record syntax with explicit field names for data types
- Follow Haskell naming conventions: camelCase for functions, PascalCase for types
- Import modules explicitly, avoid wildcard imports

## Architecture
- Maintain clean architecture separation: Domain → Infrastructure ← UserInterface ← Application
- Keep Domain layer pure (no IO operations)
- Use custom monads (like FsReadIO) to restrict and control side effects
- Place all file I/O operations in Infrastructure layer

## Code Organization
- One main type/function per module when reasonable
- Export only what's needed by other modules
- Use meaningful module names that reflect their responsibility
- Group related functions together within modules

## Error Handling
- Use Either types for operations that can fail
- Create descriptive error messages in Infrastructure.Errors
- Handle errors at appropriate levels (don't let them bubble up unnecessarily)
- Use die from System.Exit for unrecoverable errors

## Dependencies
- Stick to LTS 22.44 resolver versions
- Prefer widely-used, stable libraries
- Justify any new dependencies in terms of project needs
- Use Stack for dependency management

## Testing
- Write unit tests for pure domain logic
- Focus on testing business rules and edge cases
- Use property-based testing where appropriate
- Keep test data in test/data/ directory

## UI Guidelines
- Use Brick framework conventions
- Keep rendering logic separate from business logic
- Handle keyboard events in dedicated Input module
- Use meaningful widget names and attributes

## Performance
- Lazy evaluation is generally fine for this application size
- Be explicit about strictness only when needed
- Profile before optimizing
- Prefer readability over micro-optimizations

## Code Verification Pipeline
MANDATORY: All code changes must pass this verification pipeline before commit:

### 1. Code Formatting
- Run Ormolu formatter: `stack exec ormolu -- --mode inplace src/**/*.hs`
- Verify no formatting changes needed: `stack exec ormolu -- --mode check src/**/*.hs`
- Format test files: `stack exec ormolu -- --mode inplace test/**/*.hs`

### 2. Linting
- Run HLint on all source files: `stack exec hlint -- src/`
- Run HLint on test files: `stack exec hlint -- test/`
- Address all warnings and suggestions (aim for zero HLint warnings)
- Use `{-# HLINT ignore "Warning name" #-}` only when justified

### 3. Type Checking & Compilation
- Ensure clean build: `stack build --fast`
- Verify no warnings: `stack build --ghc-options="-Wall -Werror"`
- Check test compilation: `stack build --test --no-run-tests`

### 4. Unit Testing
- Run all tests: `stack test`
- Ensure 100% test pass rate
- Check test coverage if available: `stack test --coverage`
- Add tests for new functionality before implementing

### 5. Integration Testing
- Build and run the application: `stack exec terminal-config-manager`
- Test with example configuration files
- Verify UI interactions work correctly
- Test error handling with malformed configs

## Automation Commands
Add these convenience commands to your workflow:

### Quick Verification
```bash
# Format, lint, build, and test in one command
./scripts/verify.sh  # Create this script
```

### Pre-commit Hook
```bash
# Add to .git/hooks/pre-commit
#!/bin/bash
set -e
echo "Running code verification..."
stack exec ormolu -- --mode check src/**/*.hs test/**/*.hs
stack exec hlint -- src/ test/
stack build --ghc-options="-Wall -Werror"
stack test
echo "✅ All checks passed!"
```

### CI/CD Pipeline
Ensure the following runs in continuous integration:
- `stack build --test --haddock --no-haddock-deps`
- `stack exec hlint -- src/ test/`
- `stack exec ormolu -- --mode check $(find . -name "*.hs")`
- `stack test --coverage` 