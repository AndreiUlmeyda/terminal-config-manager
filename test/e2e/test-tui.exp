#!/usr/bin/expect -f
#
# End-to-end TUI test using expect
# This script actually runs the terminal application and simulates keyboard input
#
# Usage: ./test/e2e/test-tui.exp

set timeout 10

# Create a temporary test configuration
# Use config.yaml in current directory (one of the searched paths)
set test_config "config.yaml"
set test_target "/tmp/test-target.conf"

# Setup test files
puts "Setting up test environment..."

# Backup existing config if it exists
if {[file exists $test_config]} {
    exec cp $test_config "${test_config}.backup"
    puts "Backed up existing config.yaml"
}

# Create YAML config file with proper formatting
set config_content "config_lines_to_manage:
  - title: \"Test Setting\"
    path: \"$test_target\"
    pattern: \"setting={{value}}\"
    targetValue: \"initial\"
    possibleValues: \[\"initial\", \"changed\", \"final\"\]"

set target_content "setting=initial
other=value"

# Write files using file operations instead of echo
set config_file [open $test_config w]
puts $config_file $config_content
close $config_file

set target_file [open $test_target w]
puts $target_file $target_content
close $target_file

# Verify initial file contents
set initial_content [exec cat $test_target]
puts "Initial file contents: $initial_content"

# Start the TUI application
spawn stack exec terminal-config-manager
expect {
    timeout { 
        puts "ERROR: Application failed to start within timeout"
        exit 1 
    }
    "navigate" {
        puts "✓ TUI started successfully"
    }
    eof {
        puts "ERROR: Application exited unexpectedly"
        exit 1
    }
}

# Test navigation and value changes
puts "Testing key interactions..."

# Press right arrow to change value (initial -> changed)
send "\033\[C"
sleep 0.5

# Press right arrow again (changed -> final)  
send "\033\[C"
sleep 0.5

# Quit the application
send "q"

# Wait for application to exit
expect eof

# Verify file was modified correctly
set final_content [exec cat $test_target]
puts "Final file contents: $final_content"

if {[string match "*setting=final*" $final_content]} {
    puts "✓ SUCCESS: File was modified correctly"
    set test_result 0
} else {
    puts "✗ FAILURE: File was not modified as expected"
    puts "Expected: setting=final"
    puts "Got: $final_content"
    set test_result 1
}

# Cleanup - restore original config if it existed
if {[file exists "${test_config}.backup"]} {
    exec mv "${test_config}.backup" $test_config
    puts "Restored original config.yaml"
} else {
    exec rm -f $test_config
}
exec rm -f $test_target

exit $test_result 