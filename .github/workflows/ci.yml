name: build+tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    
    # Cache 1: Complete Stack ecosystem (GHC, dependencies, metadata, tools)
    - name: Cache Stack ecosystem
      uses: actions/cache@v4
      with:
        path: |
          ~/.stack
          ~/.local/bin
        key: ${{ runner.os }}-stack-ecosystem-${{ hashFiles('stack.yaml.lock') }}
        restore-keys: |
          ${{ runner.os }}-stack-ecosystem-
    
    # Cache 2: Project build artifacts
    - name: Cache project build
      uses: actions/cache@v4
      with:
        path: .stack-work
        key: ${{ runner.os }}-project-build-${{ hashFiles('**/*.hs', 'package.yaml', 'stack.yaml', 'terminal-config-manager.cabal') }}
        restore-keys: |
          ${{ runner.os }}-project-build-${{ hashFiles('package.yaml', 'stack.yaml', 'terminal-config-manager.cabal') }}-
          ${{ runner.os }}-project-build-
    
    # Cache 3: APT packages (for expect and other system dependencies)
    - name: Cache APT packages
      uses: actions/cache@v4
      with:
        path: |
          /var/cache/apt/archives
          /var/lib/apt/lists
        key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/ci.yml') }}-${{ github.run_number }}
        restore-keys: |
          ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/ci.yml') }}-
          ${{ runner.os }}-apt-
    
    - name: Install expect for end-to-end tests
      run: |
        # Check if expect is already installed
        if ! command -v expect &> /dev/null; then
          echo "Installing expect..."
          sudo apt-get update
          sudo apt-get install -y expect
        else
          echo "expect is already installed, skipping installation"
        fi
    
    - name: Build project and run tests
      run: stack build --test
    
    - name: Run end-to-end tests
      env:
        TERM: xterm-256color
      run: test/e2e/run-all-e2e-tests.sh
